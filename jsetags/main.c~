/* 
   This program produces emacs-style TAGS file for JavaScript and KScript programs
*/

#include <stdio.h>

// Could put no '.' in the beginning as well
char defunPatternString = "\\.([a-zA-Z0-9_]+)\\s*=\\s*function|function\\s+.([a-zA-Z0-9_]+)";

struct Analysis {
  regex_t defunPattern;
} analysis;

typedef struct Tag {
  char text[100]; // what is it
  char name[100];
  int lineNumber, charNumber;
} Tag;

typedef struct TagListEntry {
  struct TagListEntry *next;
  struct Tag;
} TagListEntry;
  
typedef struct TagFileSection {
  char* fileName;
  TagListEntry *tags;
} TagFileSection;

struct TagFileProduction {
  FILE *fp;
  TagFileSection curSection;
} tagFileProduction;

// emacs TAGS section needs to have section data in bytes written in section header

void addTag(char *tagName, int tagNameLim, int lineNumber, int charNumber) {
  // allocate tag
  TagListEntry **last = &tagFileProduction.curSection.tags;
  while(*last) {
    last = &last->next;
  }

  *last = malloc(sizeof(TagListEntry));
  if(!*last) {
    fprintf(stderr, "AAAA FUCKING HELL");
    return;
  }

  // store data in it
  strncpy((*last)->name, tagName, tagNameLim);
  (*last)->tagName[tagNameLim] = 0;
  (*last)->lineNumber = lineNumber;
  (*last)->charNumber = charNumber;
  // set text to an empty string maybe will use it later
  (*last)->text[0] = 0;
}


void parseFile(const char *fileName) {
  FILE *fp = fopen(fileName, "rt");
  char line[200];
  unsigned linesReadCnt = 0;

  if(!fp) {
    fprintf(stderr, "Could not fopen %s\n", fileName);
    return;
  }

  // start a new section in a TAGS file
  tagFileProduction.curSection.fileName = fileName;
  

  do {
    if(fgets(line, sizeof(line), fp)) {
      linesReadCnt++;
      regmatch_t funNameMatch;
      int execErr = regexec(&analysis.defunPattern, line, 1, &funNameMatch, 0);
      if(execErr) {
	if(REG_ESPACE == execErr) {
	  // XXX crash more violently
	  fprintf(stderr, "AAAAAAAAAAAAAAAAAAAAAAAAAAAAA");
	  return;
	} else { // no match
	  continue;
	}
      } else { // match
	
	
   

  

int main(int argc, char **argv) {
  char bf[100];
  // Parse options using getopt
  
  // Init everything
  int regErrCode = regcomp(&analysis.defunPattern, defunPatternString, 0);
  if(regErrCode) {
    regerror(regErrCode, &analysis.defunPattern, bf, sizeof(bf));
    fprintf(stderr, "Error in defun pattern: %s\n", bf);
    return 1;
  }

  
    
  
